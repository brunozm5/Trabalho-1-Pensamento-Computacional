import random
import time

def pesquisa_binaria(vetor, chave):
    inicio = time.time()
    esquerda, direita = 0, len(vetor) - 1
    while esquerda <= direita:
        meio = (esquerda + direita) // 2
        if vetor[meio] == chave:
            fim = time.time()
            return meio, (fim - inicio) * 1000
        elif vetor[meio] < chave:
            esquerda = meio + 1
        else:
            direita = meio - 1
    fim = time.time()
    return -1, (fim - inicio) * 1000

def ordenar_vetor(vetor):
    for i in range(len(vetor)):
        min_idx = i
        for j in range(i+1, len(vetor)):
            if vetor[j] < vetor[min_idx]:
                min_idx = j
        vetor[i], vetor[min_idx] = vetor[min_idx], vetor[i]

def main_binaria(tamanho_vetor):
    vetor = [random.randint(0, tamanho_vetor * 10) for _ in range(tamanho_vetor)]
    ordenar_vetor(vetor)
    chave = random.randint(0, tamanho_vetor * 10)
    print(f"Vetor gerado e ordenado: {vetor}")
    print(f"Chave de busca: {chave}")
    indice, tempo_execucao = pesquisa_binaria(vetor, chave)
    if indice != -1:
        print(f"A chave {chave} foi encontrada no índice {indice}.")
    else:
        print(f"A chave {chave} não foi encontrada no vetor.")
    print(f"Tempo de execução da pesquisa binária: {tempo_execucao:.6f} ms")

if __name__ == "__main__":
    tamanho_vetor = int(input("Digite o tamanho do vetor: "))
    main_binaria(tamanho_vetor)
